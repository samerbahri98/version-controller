# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: repo.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\nrepo.proto\x12\x03git\"\"\n\x04Repo\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0c\n\x04user\x18\x02 \x01(\t\"/\n\x06\x42ranch\x12\x17\n\x04repo\x18\x01 \x01(\x0b\x32\t.git.Repo\x12\x0c\n\x04name\x18\x02 \x01(\t\"5\n\x08\x42ranches\x12\x17\n\x04repo\x18\x01 \x01(\x0b\x32\t.git.Repo\x12\x10\n\x08\x62ranches\x18\x02 \x03(\t\"\xc2\x01\n\x06\x43ommit\x12\x17\n\x04repo\x18\x01 \x01(\x0b\x32\t.git.Repo\x12\x0c\n\x04hash\x18\x02 \x01(\t\x12\x11\n\thash_abbv\x18\x03 \x01(\t\x12\x11\n\ttree_hash\x18\x04 \x01(\t\x12\x16\n\x0etree_hash_abbv\x18\x05 \x01(\t\x12\x13\n\x0bparent_hash\x18\x06 \x01(\t\x12\x18\n\x10parent_hash_abbv\x18\x07 \x01(\t\x12\x16\n\x0e\x63ommit_message\x18\x08 \x01(\t\x12\x0c\n\x04\x64\x61te\x18\t \x01(\x03\"\'\n\x07\x43ommits\x12\x1c\n\x07\x63ommits\x18\x01 \x03(\x0b\x32\x0b.git.Commit\"R\n\x04\x46ile\x12\x1b\n\x06\x62ranch\x18\x01 \x01(\x0b\x32\x0b.git.Branch\x12\x0c\n\x04name\x18\x02 \x01(\t\x12\x0c\n\x04type\x18\x03 \x01(\t\x12\x11\n\tdirectory\x18\x04 \x01(\t\"!\n\x05\x46iles\x12\x18\n\x05\x66iles\x18\x01 \x03(\x0b\x32\t.git.File24\n\x0eManipulateRepo\x12\"\n\nCreateRepo\x12\t.git.Repo\x1a\t.git.Repo2>\n\x12ManipulateBranches\x12(\n\x0cListBranches\x12\t.git.Repo\x1a\r.git.Branches2g\n\x11ManipulateCommits\x12\'\n\rGetHeadCommit\x12\t.git.Repo\x1a\x0b.git.Commit\x12)\n\x0e\x46indAllCommits\x12\t.git.Repo\x1a\x0c.git.Commits2s\n\x0fManipulateFiles\x12-\n\x12GetHeadCommitFiles\x12\x0b.git.Branch\x1a\n.git.Files\x12\x31\n\x18GetMasterHeadCommitFiles\x12\t.git.Repo\x1a\n.git.Filesb\x06proto3')



_REPO = DESCRIPTOR.message_types_by_name['Repo']
_BRANCH = DESCRIPTOR.message_types_by_name['Branch']
_BRANCHES = DESCRIPTOR.message_types_by_name['Branches']
_COMMIT = DESCRIPTOR.message_types_by_name['Commit']
_COMMITS = DESCRIPTOR.message_types_by_name['Commits']
_FILE = DESCRIPTOR.message_types_by_name['File']
_FILES = DESCRIPTOR.message_types_by_name['Files']
Repo = _reflection.GeneratedProtocolMessageType('Repo', (_message.Message,), {
  'DESCRIPTOR' : _REPO,
  '__module__' : 'repo_pb2'
  # @@protoc_insertion_point(class_scope:git.Repo)
  })
_sym_db.RegisterMessage(Repo)

Branch = _reflection.GeneratedProtocolMessageType('Branch', (_message.Message,), {
  'DESCRIPTOR' : _BRANCH,
  '__module__' : 'repo_pb2'
  # @@protoc_insertion_point(class_scope:git.Branch)
  })
_sym_db.RegisterMessage(Branch)

Branches = _reflection.GeneratedProtocolMessageType('Branches', (_message.Message,), {
  'DESCRIPTOR' : _BRANCHES,
  '__module__' : 'repo_pb2'
  # @@protoc_insertion_point(class_scope:git.Branches)
  })
_sym_db.RegisterMessage(Branches)

Commit = _reflection.GeneratedProtocolMessageType('Commit', (_message.Message,), {
  'DESCRIPTOR' : _COMMIT,
  '__module__' : 'repo_pb2'
  # @@protoc_insertion_point(class_scope:git.Commit)
  })
_sym_db.RegisterMessage(Commit)

Commits = _reflection.GeneratedProtocolMessageType('Commits', (_message.Message,), {
  'DESCRIPTOR' : _COMMITS,
  '__module__' : 'repo_pb2'
  # @@protoc_insertion_point(class_scope:git.Commits)
  })
_sym_db.RegisterMessage(Commits)

File = _reflection.GeneratedProtocolMessageType('File', (_message.Message,), {
  'DESCRIPTOR' : _FILE,
  '__module__' : 'repo_pb2'
  # @@protoc_insertion_point(class_scope:git.File)
  })
_sym_db.RegisterMessage(File)

Files = _reflection.GeneratedProtocolMessageType('Files', (_message.Message,), {
  'DESCRIPTOR' : _FILES,
  '__module__' : 'repo_pb2'
  # @@protoc_insertion_point(class_scope:git.Files)
  })
_sym_db.RegisterMessage(Files)

_MANIPULATEREPO = DESCRIPTOR.services_by_name['ManipulateRepo']
_MANIPULATEBRANCHES = DESCRIPTOR.services_by_name['ManipulateBranches']
_MANIPULATECOMMITS = DESCRIPTOR.services_by_name['ManipulateCommits']
_MANIPULATEFILES = DESCRIPTOR.services_by_name['ManipulateFiles']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _REPO._serialized_start=19
  _REPO._serialized_end=53
  _BRANCH._serialized_start=55
  _BRANCH._serialized_end=102
  _BRANCHES._serialized_start=104
  _BRANCHES._serialized_end=157
  _COMMIT._serialized_start=160
  _COMMIT._serialized_end=354
  _COMMITS._serialized_start=356
  _COMMITS._serialized_end=395
  _FILE._serialized_start=397
  _FILE._serialized_end=479
  _FILES._serialized_start=481
  _FILES._serialized_end=514
  _MANIPULATEREPO._serialized_start=516
  _MANIPULATEREPO._serialized_end=568
  _MANIPULATEBRANCHES._serialized_start=570
  _MANIPULATEBRANCHES._serialized_end=632
  _MANIPULATECOMMITS._serialized_start=634
  _MANIPULATECOMMITS._serialized_end=737
  _MANIPULATEFILES._serialized_start=739
  _MANIPULATEFILES._serialized_end=854
# @@protoc_insertion_point(module_scope)
