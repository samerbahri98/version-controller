# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import repo_pb2 as repo__pb2


class ManipulateRepoStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateRepo = channel.unary_unary(
                '/git.ManipulateRepo/CreateRepo',
                request_serializer=repo__pb2.Repo.SerializeToString,
                response_deserializer=repo__pb2.Repo.FromString,
                )


class ManipulateRepoServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateRepo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManipulateRepoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateRepo': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRepo,
                    request_deserializer=repo__pb2.Repo.FromString,
                    response_serializer=repo__pb2.Repo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'git.ManipulateRepo', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ManipulateRepo(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateRepo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/git.ManipulateRepo/CreateRepo',
            repo__pb2.Repo.SerializeToString,
            repo__pb2.Repo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class GetCommitsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetHeadCommit = channel.unary_unary(
                '/git.GetCommits/GetHeadCommit',
                request_serializer=repo__pb2.Repo.SerializeToString,
                response_deserializer=repo__pb2.Commit.FromString,
                )
        self.FindAllCommits = channel.unary_unary(
                '/git.GetCommits/FindAllCommits',
                request_serializer=repo__pb2.Repo.SerializeToString,
                response_deserializer=repo__pb2.Commits.FromString,
                )


class GetCommitsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetHeadCommit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindAllCommits(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GetCommitsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetHeadCommit': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHeadCommit,
                    request_deserializer=repo__pb2.Repo.FromString,
                    response_serializer=repo__pb2.Commit.SerializeToString,
            ),
            'FindAllCommits': grpc.unary_unary_rpc_method_handler(
                    servicer.FindAllCommits,
                    request_deserializer=repo__pb2.Repo.FromString,
                    response_serializer=repo__pb2.Commits.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'git.GetCommits', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GetCommits(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetHeadCommit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/git.GetCommits/GetHeadCommit',
            repo__pb2.Repo.SerializeToString,
            repo__pb2.Commit.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindAllCommits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/git.GetCommits/FindAllCommits',
            repo__pb2.Repo.SerializeToString,
            repo__pb2.Commits.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
